"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["3853"],{1688:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>r,toc:()=>d,default:()=>h,metadata:()=>s,assets:()=>o,contentTitle:()=>a});var s=JSON.parse('{"id":"api/act/src/functions/state","title":"state","description":"@rotorsoft/act-root","source":"@site/docs/api/act/src/functions/state.md","sourceDirName":"api/act/src/functions","slug":"/api/act/src/functions/state","permalink":"/act-root/docs/api/act/src/functions/state","draft":false,"unlisted":false,"editUrl":"https://github.com/rotorsoft/act-root/edit/master/docs/docs/api/act/src/functions/state.md","tags":[],"version":"current","frontMatter":{}}'),i=n(3302),c=n(4981);let r={},a=void 0,o={},d=[{value:"Type Parameters",id:"type-parameters",level:2},{value:"S",id:"s",level:3},{value:"Parameters",id:"parameters",level:2},{value:"name",id:"name",level:3},{value:"state",id:"state",level:3},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2}];function l(e){let t={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"/act-root/docs/api/",children:(0,i.jsx)(t.strong,{children:"@rotorsoft/act-root"})})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"/act-root/docs/api/",children:"@rotorsoft/act-root"})," / ",(0,i.jsx)(t.a,{href:"/act-root/docs/api/act/src/",children:"act/src"})," / state"]}),"\n",(0,i.jsx)(t.h1,{id:"function-state",children:"Function: state()"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"state"}),"<",(0,i.jsx)(t.code,{children:"S"}),">(",(0,i.jsx)(t.code,{children:"name"}),", ",(0,i.jsx)(t.code,{children:"state"}),"): ",(0,i.jsx)(t.a,{href:"/act-root/docs/api/act/src/type-aliases/StateBuilder",children:(0,i.jsx)(t.code,{children:"StateBuilder"})}),"<",(0,i.jsx)(t.code,{children:"S"}),">"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Defined in: ",(0,i.jsx)(t.a,{href:"https://github.com/Rotorsoft/act-root/blob/899b4c007f7174addb4ed80718717f6bc8827db4/libs/act/src/state-builder.ts#L127",children:"libs/act/src/state-builder.ts:127"})]}),"\n",(0,i.jsx)(t.p,{children:"Fluent interface for defining a strongly-typed state machine using Zod schemas."}),"\n",(0,i.jsx)(t.p,{children:"This builder helps you model a system where:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["You start by defining the state schema with ",(0,i.jsx)(t.code,{children:"state(name, zodSchema)"})]}),"\n",(0,i.jsxs)(t.li,{children:["Then, provide the initial state using ",(0,i.jsx)(t.code,{children:".init(() => defaultState)"})]}),"\n",(0,i.jsxs)(t.li,{children:["Declare the event types your system can emit using ",(0,i.jsx)(t.code,{children:".emits({ ... })"})]}),"\n",(0,i.jsxs)(t.li,{children:["Define how emitted events update state with ",(0,i.jsx)(t.code,{children:".patch({ ... })"})]}),"\n",(0,i.jsxs)(t.li,{children:["Define actions using ",(0,i.jsx)(t.code,{children:'.on("actionName", actionSchema)'}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Optionally constrain the action with ",(0,i.jsx)(t.code,{children:".given([...invariants])"})]}),"\n",(0,i.jsxs)(t.li,{children:["Then finalize the action behavior with ",(0,i.jsx)(t.code,{children:".emit(handler)"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["(Optional) Define a ",(0,i.jsx)(t.code,{children:".snap(snapshot => boolean)"})," function to reduce recomputations"]}),"\n",(0,i.jsxs)(t.li,{children:["Finalize the state machine definition using ",(0,i.jsx)(t.code,{children:".build()"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,i.jsx)(t.h3,{id:"s",children:"S"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"S"})," ",(0,i.jsx)(t.em,{children:"extends"})," ",(0,i.jsx)(t.a,{href:"/act-root/docs/api/act/src/type-aliases/Schema",children:(0,i.jsx)(t.code,{children:"Schema"})})]}),"\n",(0,i.jsx)(t.p,{children:"The type of state"}),"\n",(0,i.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsx)(t.h3,{id:"name",children:"name"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"string"})}),"\n",(0,i.jsx)(t.h3,{id:"state",children:"state"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"ZodType"}),"<",(0,i.jsx)(t.code,{children:"S"}),">"]}),"\n",(0,i.jsx)(t.h2,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"/act-root/docs/api/act/src/type-aliases/StateBuilder",children:(0,i.jsx)(t.code,{children:"StateBuilder"})}),"<",(0,i.jsx)(t.code,{children:"S"}),">"]}),"\n",(0,i.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'const machine = state("machine", myStateSchema)\n  .init(() => ({ count: 0 }))\n  .emits({ Incremented: z.object({ amount: z.number() }) })\n  .patch({\n    Incremented: (event, state) => ({ count: state.count + event.amount })\n  })\n  .on("increment", z.object({ by: z.number() }))\n  .given([{ description: "must be positive", valid: (s, a) => a?.by > 0 }])\n  .emit((action, state) => ({ type: "Incremented", amount: action.by }))\n  .build();\n'})})]})}function h(e={}){let{wrapper:t}={...(0,c.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},4981:function(e,t,n){n.d(t,{Z:()=>a,a:()=>r});var s=n(248);let i={},c=s.createContext(i);function r(e){let t=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(c.Provider,{value:t},e.children)}}}]);