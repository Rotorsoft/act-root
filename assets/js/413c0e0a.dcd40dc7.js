"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3856],{4318:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(4700);const c={},i=s.createContext(c);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},7270:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"api/act.src.Function.state","title":"act.src.Function.state","description":"Act Framework Documentation v0.0.1","source":"@site/docs/api/act.src.Function.state.md","sourceDirName":"api","slug":"/api/act.src.Function.state","permalink":"/docs/api/act.src.Function.state","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/act.src.Function.state.md","tags":[],"version":"current","frontMatter":{}}');var c=t(7968),i=t(4318);const a={},r=void 0,d={},o=[{value:"Type Parameters",id:"type-parameters",level:2},{value:"S",id:"s",level:3},{value:"Parameters",id:"parameters",level:2},{value:"name",id:"name",level:3},{value:"state",id:"state",level:3},{value:"Returns",id:"returns",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.p,{children:(0,c.jsx)(n.a,{href:"/docs/api/",children:(0,c.jsx)(n.strong,{children:"Act Framework Documentation v0.0.1"})})}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"/docs/api/",children:"Act Framework Documentation"})," / ",(0,c.jsx)(n.a,{href:"/docs/api/act.src",children:"act/src"})," / state"]}),"\n",(0,c.jsx)(n.h1,{id:"function-state",children:"Function: state()"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"state"}),"<",(0,c.jsx)(n.code,{children:"S"}),">(",(0,c.jsx)(n.code,{children:"name"}),", ",(0,c.jsx)(n.code,{children:"state"}),"): ",(0,c.jsx)(n.a,{href:"/docs/api/act.src.TypeAlias.StateBuilder",children:(0,c.jsx)(n.code,{children:"StateBuilder"})}),"<",(0,c.jsx)(n.code,{children:"S"}),">"]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["Defined in: ",(0,c.jsx)(n.a,{href:"https://github.com/Rotorsoft/act-root/blob/e73e6288fc64fc771d62b165a7ebea9457327b5b/libs/act/src/state-builder.ts#L76",children:"libs/act/src/state-builder.ts:76"})]}),"\n",(0,c.jsx)(n.p,{children:"Fluent interface for defining a strongly-typed state machine using Zod schemas."}),"\n",(0,c.jsx)(n.p,{children:"This builder helps you model a system where:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["You start by defining the state schema with ",(0,c.jsx)(n.code,{children:"state(name, zodSchema)"})]}),"\n",(0,c.jsxs)(n.li,{children:["Then, provide the initial state using ",(0,c.jsx)(n.code,{children:".init(() => defaultState)"})]}),"\n",(0,c.jsxs)(n.li,{children:["Declare the event types your system can emit using ",(0,c.jsx)(n.code,{children:".emits({ ... })"})]}),"\n",(0,c.jsxs)(n.li,{children:["Define how emitted events update state with ",(0,c.jsx)(n.code,{children:".patch({ ... })"})]}),"\n",(0,c.jsxs)(n.li,{children:["Define actions using ",(0,c.jsx)(n.code,{children:'.on("actionName", actionSchema)'}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Optionally constrain the action with ",(0,c.jsx)(n.code,{children:".given([...invariants])"})]}),"\n",(0,c.jsxs)(n.li,{children:["Then finalize the action behavior with ",(0,c.jsx)(n.code,{children:".emit(handler)"})]}),"\n"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["(Optional) Define a ",(0,c.jsx)(n.code,{children:".snap(snapshot => boolean)"})," function to reduce recomputations"]}),"\n",(0,c.jsxs)(n.li,{children:["Finalize the state machine definition using ",(0,c.jsx)(n.code,{children:".build()"})]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"Example usage:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:'const machine = state("machine", myStateSchema)\n  .init(() => ({ count: 0 }))\n  .emits({ Incremented: z.object({ amount: z.number() }) })\n  .patch({\n    Incremented: (event, state) => ({ count: state.count + event.amount })\n  })\n  .on("increment", z.object({ by: z.number() }))\n  .given([{ description: "must be positive", valid: (s, a) => a?.by > 0 }])\n  .emit((action, state) => ({ type: "Incremented", amount: action.by }))\n  .build();\n'})}),"\n",(0,c.jsx)(n.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,c.jsx)(n.h3,{id:"s",children:"S"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"S"})," ",(0,c.jsx)(n.em,{children:"extends"})," ",(0,c.jsx)(n.a,{href:"/docs/api/act.src.TypeAlias.Schema",children:(0,c.jsx)(n.code,{children:"Schema"})})]}),"\n",(0,c.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,c.jsx)(n.h3,{id:"name",children:"name"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.code,{children:"string"})}),"\n",(0,c.jsx)(n.h3,{id:"state",children:"state"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"ZodType"}),"<",(0,c.jsx)(n.code,{children:"S"}),">"]}),"\n",(0,c.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"/docs/api/act.src.TypeAlias.StateBuilder",children:(0,c.jsx)(n.code,{children:"StateBuilder"})}),"<",(0,c.jsx)(n.code,{children:"S"}),">"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}}}]);