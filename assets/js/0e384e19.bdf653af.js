"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["5217"],{6662:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>r,toc:()=>l,default:()=>h,metadata:()=>i,assets:()=>c,contentTitle:()=>a});var i=JSON.parse('{"id":"intro","title":"Act Framework","description":"Welcome to the Act Framework documentation! Act is a modern, event-sourced framework for building scalable, maintainable, and auditable applications in TypeScript. Act is inspired by the best ideas from Domain-Driven Design (DDD), Command Query Responsibility Segregation (CQRS), and Event Sourcing, but is designed to be simple, composable, and highly type-safe.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/act-root/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/rotorsoft/act-root/edit/master/docs/docs/intro.md","tags":[],"version":"current","frontMatter":{"id":"intro","title":"Act Framework"},"sidebar":"docs","next":{"title":"State Management","permalink":"/act-root/docs/concepts/state-management"}}'),s=n(1273),o=n(8749);let r={id:"intro",title:"Act Framework"},a="Act Framework",c={},l=[{value:"\u{1F3AF} Purpose &amp; Philosophy",id:"-purpose--philosophy",level:2},{value:"\u{1F680} Why Act?",id:"-why-act",level:2},{value:"\u{1F3D7}\uFE0F Core Concepts",id:"\uFE0F-core-concepts",level:2},{value:"Actions \u2192 State \u2190 Reactions",id:"actions--state--reactions",level:3},{value:"\u{1F680} Quick Start",id:"-quick-start",level:2},{value:"\u2753 FAQ",id:"-faq",level:2},{value:"\u{1F4C4} License",id:"-license",level:2}];function d(e){let t={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"act-framework",children:"Act Framework"})}),"\n",(0,s.jsx)(t.p,{children:"Welcome to the Act Framework documentation! Act is a modern, event-sourced framework for building scalable, maintainable, and auditable applications in TypeScript. Act is inspired by the best ideas from Domain-Driven Design (DDD), Command Query Responsibility Segregation (CQRS), and Event Sourcing, but is designed to be simple, composable, and highly type-safe."}),"\n",(0,s.jsx)(t.h2,{id:"-purpose--philosophy",children:"\u{1F3AF} Purpose & Philosophy"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Act"})," aims to make event-sourced, reactive architectures accessible and productive for all TypeScript developers. It provides a minimal, functional core for modeling your domain as state machines, capturing every change as an immutable event, and reacting to those changes in a scalable, testable way."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Simplicity:"})," Focus on the essentials\u2014state, actions, and reactions\u2014without boilerplate or code generation."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Type Safety:"})," Leverage TypeScript and Zod for compile-time guarantees and runtime validation."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Composability:"})," Build complex workflows by composing small, testable state machines and reactions."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Auditability:"})," Every state change is an event, enabling time travel, debugging, and compliance."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Adaptability:"})," Easily swap storage backends, integrate with external systems, and scale from in-memory to production databases."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"-why-act",children:"\u{1F680} Why Act?"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Event Sourcing Made Easy:"})," Model your domain as a series of state transitions, with every change captured as an event."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Functional State Machines:"})," Define state, actions, and events as pure functions\u2014no classes or decorators required."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Reactive by Default:"})," Build workflows and integrations by reacting to events, not just commands."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Production-Ready:"})," Includes adapters for in-memory and Postgres event stores, with robust resource management."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Minimal Footprint:"})," No codegen, no runtime bloat, and a tiny bundle size."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"\uFE0F-core-concepts",children:"\u{1F3D7}\uFE0F Core Concepts"}),"\n",(0,s.jsx)(t.h3,{id:"actions--state--reactions",children:"Actions \u2192 State \u2190 Reactions"}),"\n",(0,s.jsx)(t.p,{children:"Act follows a simple but powerful pattern:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Actions:"})," Commands that represent intent to change state (e.g., user input, API calls)."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"State:"})," The current state of your domain objects, modeled as immutable data."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Reactions:"})," Responses to state changes that can trigger additional actions, side effects, or integrations."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"This pattern enables you to build complex, event-driven systems while maintaining clarity, testability, and auditability."}),"\n",(0,s.jsx)(t.h2,{id:"-quick-start",children:"\u{1F680} Quick Start"}),"\n",(0,s.jsx)(t.p,{children:"Here's a simple example to get you started:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'import { act, state, z } from "@rotorsoft/act";\n\n// Define a counter state machine\nconst Counter = state("Counter", z.object({ count: z.number() }))\n  .init(() => ({ count: 0 }))\n  .emits({ Incremented: z.object({ amount: z.number() }) })\n  .patch({\n    Incremented: (event, state) => ({ count: state.count + event.amount }),\n  })\n  .on("increment", z.object({ by: z.number() }))\n  .emit((action) => ["Incremented", { amount: action.by }])\n  .build();\n\n// Create an application\nconst app = act().with(Counter).build();\n\n// Use the application\nconst actor = { id: "user1", name: "User" };\nawait app.do("increment", { stream: "counter1", actor }, { by: 5 });\nconst state = await app.load(Counter, "counter1");\nconsole.log(state.state); // { count: 5 }\n'})}),"\n",(0,s.jsx)(t.h2,{id:"-faq",children:"\u2753 FAQ"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Q: Do I need to use Postgres?"}),(0,s.jsx)(t.br,{}),"\n","A: No. You can start with the in-memory store and switch to Postgres or another backend as needed."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Q: Is Act only for DDD experts?"}),(0,s.jsx)(t.br,{}),"\n","A: No. Act is designed to be approachable for all TypeScript developers, with a focus on simplicity and strong typing."]}),"\n",(0,s.jsx)(t.h2,{id:"-license",children:"\u{1F4C4} License"}),"\n",(0,s.jsx)(t.p,{children:"This documentation is part of the Act Framework project, licensed under the MIT License."}),"\n",(0,s.jsxs)(t.p,{children:["For more information, visit the ",(0,s.jsx)(t.a,{href:"https://github.com/rotorsoft/act-root",children:"Act Framework GitHub repository"}),"."]})]})}function h(e={}){let{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8749:function(e,t,n){n.d(t,{R:()=>r,x:()=>a});var i=n(3917);let s={},o=i.createContext(s);function r(e){let t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);