"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8084],{4318:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(4700);const o={},a=s.createContext(o);function r(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(a.Provider,{value:n},e.children)}},8763:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"concepts/event-sourcing","title":"Event Sourcing","description":"Background","source":"@site/docs/concepts/event-sourcing.md","sourceDirName":"concepts","slug":"/concepts/event-sourcing","permalink":"/act-root/docs/docs/concepts/event-sourcing","draft":false,"unlisted":false,"editUrl":"https://github.com/rotorsoft/act-root/edit/master/docs/docs/concepts/event-sourcing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"State Management","permalink":"/act-root/docs/docs/concepts/state-management"},"next":{"title":"Utilities","permalink":"/act-root/docs/docs/concepts/utilities"}}');var o=t(7968),a=t(4318);const r={},i="Event Sourcing",c={},d=[{value:"Background",id:"background",level:2},{value:"Event Storage",id:"event-storage",level:2},{value:"Snapshot Management",id:"snapshot-management",level:2},{value:"Event Queries",id:"event-queries",level:2}];function l(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"event-sourcing",children:"Event Sourcing"})}),"\n",(0,o.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,o.jsx)(n.p,{children:"Event sourcing is a design pattern in which all changes to application state are stored as a sequence of events. This provides a complete audit trail, enables state reconstruction at any point in time, and supports advanced scenarios like temporal queries and projections. By persisting events in an append-only store, the framework ensures data integrity and enables powerful analytics and debugging capabilities."}),"\n",(0,o.jsx)(n.h2,{id:"event-storage",children:"Event Storage"}),"\n",(0,o.jsx)(n.p,{children:"All events are persisted in an append-only store, providing a complete audit trail of all state changes."}),"\n",(0,o.jsx)(n.h2,{id:"snapshot-management",children:"Snapshot Management"}),"\n",(0,o.jsx)(n.p,{children:"Snapshots can be used to optimize state reconstruction for aggregates with long event streams."}),"\n",(0,o.jsx)(n.h2,{id:"event-queries",children:"Event Queries"}),"\n",(0,o.jsx)(n.p,{children:"Query event streams for analysis, debugging, or building projections."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"../api/act.src",children:"API Reference (act)"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);